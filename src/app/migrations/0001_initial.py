# Generated by Django 4.2 on 2023-05-05 10:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergen',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Allergen',
                'verbose_name_plural': 'Allergens',
            },
        ),
        migrations.CreateModel(
            name='IMenu',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False, verbose_name='id')),
            ],
        ),
        migrations.CreateModel(
            name='Gluten',
            fields=[
                ('imenu_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.imenu')),
            ],
            options={
                'verbose_name': 'Gluten',
                'verbose_name_plural': 'MenuGlutens',
            },
            bases=('app.imenu',),
        ),
        migrations.CreateModel(
            name='Lactose',
            fields=[
                ('imenu_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.imenu')),
            ],
            options={
                'verbose_name': 'Lactose',
                'verbose_name_plural': 'MenuLactose',
            },
            bases=('app.imenu',),
        ),
        migrations.CreateModel(
            name='Lectins',
            fields=[
                ('imenu_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='app.imenu')),
            ],
            options={
                'verbose_name': 'Lectins',
                'verbose_name_plural': 'MenuLectins',
            },
            bases=('app.imenu',),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('kilocalories', models.PositiveIntegerField(default=0, verbose_name='Kilocalories')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, max_digits=8, verbose_name='Proteins')),
                ('fats', models.DecimalField(decimal_places=1, default=0, max_digits=8, verbose_name='Fats')),
                ('carb', models.DecimalField(decimal_places=1, default=0, max_digits=8, verbose_name='Carbohydrates')),
                ('allergens', models.ManyToManyField(to='app.allergen', verbose_name='Allergen list')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.AddField(
            model_name='imenu',
            name='breakfast',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='breakfast', to='app.product'),
        ),
        migrations.AddField(
            model_name='imenu',
            name='dinner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinner', to='app.product'),
        ),
        migrations.AddField(
            model_name='imenu',
            name='lunch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lunch', to='app.product'),
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
